here we have utilised simple observation and also 2d array prefix minimum concept;
you just need to observe that our path score is only dependent on value of final and initial position. 
now assuming first n-1, m-1  is the final path then find the mininimum value ....... now apply your dimmak this hint is engouh;

code looks like
class Solution {
public:
    int maxScore(vector<vector<int>>& grid) {
        
        // making a prefix minimum;
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>> dp(n,vector<int>(m));
        // dp[i][j] represents minimum value in i*j matrix;
        dp[0][0]=grid[0][0];
        for(int i=1;i<m;i++){
            dp[0][i]=min(dp[0][i-1],grid[0][i]);
        }
        for(int i=1;i<n;i++){
            dp[i][0]=min(dp[i-1][0],grid[i][0]);
        }
        for(int i=1;i<n;i++){
            for(int j=1;j<m;j++){
              dp[i][j]=min(dp[i-1][j],dp[i][j-1]);
              dp[i][j]=min(dp[i][j],grid[i][j]);
            }
        }
        int ans=INT_MIN;
        for(int i=n-1;i>0;i--){
            for(int j=m-1;j>0;j--){
              int mini=min(dp[i-1][j],dp[i][j-1]);
              ans=max(ans,grid[i][j]-mini);
            }
        }
        for(int i=n-1;i>0;i--){
            ans=max(ans,grid[i][0]-dp[i-1][0]);
        }
        for(int j=m-1;j>0;j--){
            ans=max(ans,grid[0][j]-dp[0][j-1]);
        }
       return ans;

    }
};
